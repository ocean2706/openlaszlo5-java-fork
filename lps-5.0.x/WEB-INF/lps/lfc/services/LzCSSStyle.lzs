/**
 *
 * @copyright Copyright 2001-2011 Laszlo Systems, Inc.  All Rights Reserved.
 *            Use is subject to license terms.
 *
 * @affects lzcssstyle lzcssstylerule
 * @access private
 * @topic LFC
 * @subtopic CSS
 */

/**
 * <p>This service provides style information.</p>
 * <p>This implements Interface ViewCSS (introduced in DOM Level 2)
 * from here: http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-ViewCSS
 * </p>
 */
final class LzCSSStyleRule {
  /** @access private */
  var parsed = null;
  //No rule has a specificity of zero
  /** @access private */
  var specificity:Number = 0;
  /** @access private */
  var dynamic:Boolean = false;
  /** @access private */
  var properties;
  /** @access private */
  var _lexorder
  if ($debug) {
    // In debug mode, the constructor fills these in
//     LzCSSStyleRule.prototype[Debug.FUNCTION_FILENAME] = null;
//     LzCSSStyleRule.prototype[Debug.FUNCTION_LINENO] = null;
    // Don't really want to have to make this class dynamic just for
    // that...  So, we cheat.
    var _dbg_filename:String = null;
    var _dbg_lineno:Number = 0;
  }

  function LzCSSStyleRule(selector, properties, source:String, line:Number) {
    // A 'selector' has the following (optional) properties,
    // abbreviated for compactness in the source:
    //
    // t: tag
    // i: identifier
    // a: attribute
    // v: attribute value (default, just that it exists)
    // m: attribute match (default '=')
    // &: compound sub-selector (additional attributes)
    // s: specificity
    //
    // k: string key that is a unique encoding of the selector for
    // caching applicability
    this.parsed = selector;
    if (selector['length']) {
      var s:Number = 0;
      for (var i = 0, l = selector.length; i < l; i++) {
        var sel = selector[i];
        s += sel.s;
        // name is not a dynamic attribute
        if (('v' in sel) && (sel.a != 'name')) { this.dynamic = true; }
        while (sel['&']) {
          sel = sel['&'];
          if (('v' in sel) && (sel.a != 'name')) { this.dynamic = true; }
        }
      }
      this.specificity = s;
    } else {
      var sel = selector;
      this.specificity = sel.s;
        // name is not a dynamic attribute
      if (('v' in sel) && (sel.a != 'name')) { this.dynamic = true; }
      while (sel['&']) {
        sel = sel['&'];
        if (('v' in sel) && (sel.a != 'name')) { this.dynamic = true; }
      }
    }
    this.properties = properties;
    // The source info is always generated, but we drop it if we are
    // not in debug mode.  Maybe there is a better way...
    if ($debug) {
      // You will find out if these are the wrong names
      this[Debug.FUNCTION_FILENAME] = source;
      this[Debug.FUNCTION_LINENO] = line;
    }
  };

  /** @access private */
  function clone ():LzCSSStyleRule {
    var result:LzCSSStyleRule =
      new LzCSSStyleRule(this.parsed, this.properties, ($debug ? this['_dbg_filename'] : ''), ($debug ? this['_dbg_lineno'] : 0));
    result._lexorder = this._lexorder;
    return result;
  }

  /** @access private */
  static function selectorToString (sel:Object):String {
    var str:String = sel['k'];
    if (str) { return str; }
    var seltn:String = sel['t'];
    var seli:String = sel['i'];
    var sela:String = sel['a'];
    if (! (seltn||seli||sela)) { return '*'; }
    var selv = sel['v'];
    var selm = sel['m'] || '=';
    str = sel.k = ((seltn ? seltn : '') +
                   (seli ? ('#'+seli) : '') +
                   (sela ? (sela == 'styleclass' ?
                            ('.'+selv) :
                            ('[' +
                             sela + (selv ? (selm + selv) : '') +
                             ']')
                            ) : '') +
                   (('&' in sel) ? LzCSSStyleRule.selectorToString(sel['&']) : '')
                   );
    return str;
  }

  if ($debug) {
    /** @access private */
    var _dbg_name = function ():String {
      var rp = this.parsed;
      if (rp['length']) {
        var n:String = '';
        for (var i = 0; i < rp.length; i++) {
          n += LzCSSStyleRule.selectorToString(rp[i]) + ' ';
        }
        n = n.substring(0, n.length-1);
      } else {
        var n = LzCSSStyleRule.selectorToString(rp);
      }
      return n;
    };
  }

  function equal (that):Boolean {
    function equal (pa, pb):Boolean {
      return ((pa['t'] == pb['t']) &&
              (pa['i'] == pb['i']) &&
              (pa['a'] == pb['a']) &&
              (pa['v'] == pb['v']) &&
              (pa['m'] == pb['m']) &&
              (((! pa['&']) && (!pb['&'])) ||
               (pa['&'] && pb['&'] && equal(pa['&'], pb['&']))));
    }
    var rap = this.parsed;
    var rbp = that.parsed;
    if (rap['length'] != rbp['length']) {
      return false;
    }
    if (rap['length']) {
      for (var i:Number = rap.length - 1; i >= 0; i--) {
        if (! equal(rap[i], rbp[i])) {
          return false;
        }
      }
    }
    if (! equal(rap, rbp)) {
      return false;
    }
    var aprops = this.properties;
    var bprops = that.properties;
    for (var ak:String in aprops) {
      if (aprops[ak] !== bprops[ak]) { return false; }
    }
    for (var bk:String in bprops) {
      if (aprops[bk] !== bprops[bk]) { return false; }
    }
    return true;
  };

};                                // End of LzCSSStyleRule
lz.CSSStyleRule = LzCSSStyleRule; // publish

final class LzCSSStyleClass {

  /** @access private */
  var _idRules:Object;
  /** @access private */
  var _nameRules:Object;
  /** @access private */
  var _attrs:Array;
  /** @access private */
  var _attrRules:Object;
  /** @access private */
  var _tags:Array;
  /** @access private */
  var _tagRules:Object;
  /** @access private */
  var _rules:Array;

  function LzCSSStyleClass () {
    // See LPP-5232
    this._idRules = {};
    this._nameRules = {};
    this._attrs = [];
    this._attrRules = {};
    this._tags = [];
    this._tagRules = {};
    this._rules = [];
  };

  function getComputedStyle ( node ){
    var csssd:LzCSSStyleDeclaration = new LzCSSStyleDeclaration( );
    csssd.setNode( node );
    return csssd;
  };

  // Hand-inlined in LzNode/__LZstyleBindAttribute
  // Must be kept in sync
  function getPropertyValueFor (node:LzNode, pname:String) {
    var pc = node['__LZPropertyCache'] || this.getPropertyCache(node);
    if (pname in pc) {
      return pc[pname];
    }
    // NOTE [2010-09-21 ptw] (LPP-8041) We do _not_ issue a warning
    // here for non-existant properties because this is how you can
    // programatically probe for properties.  The warning is only
    // issued when this is called implicitly in __LZstyleBindAttribute
    // and there is neither an applicable property nor a default value
    // for the attribute.

    // Cache negative values lazily
    return pc[pname] = (void 0);
  };

  // See http://www.w3.org/TR/CSS21/propidx.html
  static var CSSInheritableProperties =
  {'azimuth': true,
   'border-collapse': true, 'border-spacing': true, 'caption-side': true,
   'color': true, 'cursor': true, 'direction': true, 'elevation': true, 'empty-cells': true,
   'font-family': true, 'font-size': true, 'font-style': true, 'font-variant': true, 'font-weight': true, 'font': true,
   'letter-spacing': true, 'line-height': true,
   'list-style-image': true, 'list-style-position': true, 'list-style-type': true, 'list-style': true,
   'orphans': true,
   'pitch-range': true, 'pitch': true, 'quotes': true, 'richness': true,
   'speak-header': true, 'speak-numeral': true, 'speak-punctuation': true, 'speak': true, 'speech-rate': true, 'stress': true,
   'text-indent': true, 'text-transform': true, 'visibility': true,
   'voice-family': true, 'volume': true,
   'whitespace': true, 'widows': true, 'word-spacing': true};

  static var INHERIT = {toString: function () { return "inherit"; }};
  static var EMTPY_CACHE = {};

  /*
   * The first time we look up a CSS property on a node, we compute
   * and cache all the rules applicable to that node, and compute and
   * cache all the CSS properties that those rules specify.  These
   * property values are kept in a node-local cache so that subsequent
   * property lookups can be done with no function call overhead by
   * simply looking in the cache.
   *
   * CSS rules can depend on attribute values (the [attr=value]
   * selector).  As we are gathering the rules that could apply to the
   * node, we gather the attributes and node(s) that these selectors
   * could match on.  Once the gathering and caching is complete, we
   * create a delegate that will update the cache (and re-apply the
   * values) if any of these dependencies change.
   *
   * Some CSS properties can be inherited (from ancestor nodes), so we
   * also compute a second cache which is all the inheritable CSS
   * property values.  We compute and cache the inheritable properties
   * by requesting our parent node's local cache (which will request
   * it's parent's, etc.)  The inheritable properties are also cached
   * so that in computing the local cache we can quickly find and
   * merge in any inheritable property values that are not specified
   * by locally applicable rules, or properties that are specified to
   * be inherited by the local rules.
   *
   * The inherited property values can change if the parent node's
   * inherited cache changes (and it depends on it's parent), so we
   * always install an additional dependency for the update delegate
   * to listen to the parent inherited cache changing.  To minimize
   * unnecessary updates, we carefully compare the old and new
   * inheritance cache and only send a change event if the properties
   * or values in the cache have actually changed on update.
   */
  function getPropertyCache ( node:LzNode ) {
    // When does this happen?
    if (!node) return LzCSSStyleClass.EMTPY_CACHE;
    var pc = node['__LZPropertyCache'];
    if ( pc ) { return pc; }
    var ip:LzNode = node.immediateparent;
    // Get the parent caches, or if we are at the root, create them.
    if (ip && (ip !== node)) {
      var ppc = ip['__LZPropertyCache'] || this.getPropertyCache(ip);
      var pipc = ip['__LZInheritedPropertyCache'];
    } else {
      var ppc = LzCSSStyleClass.EMTPY_CACHE;
      var pipc = LzCSSStyleClass.EMTPY_CACHE;
    }
    // Process the rules from least to most specific, so the
    // most-specific win, put them in our local cache
    var cdesc = node.$CSSDescriptor;
    var expanders = cdesc && cdesc.expanders;
    var cssinherited = LzCSSStyleClass.CSSInheritableProperties;
    var nodeinherited = cdesc && cdesc.inheritable;
    // Get rules applicable to us
    var rules = node['__LZRuleCache'];
    if (! rules) {
      // If we have expanders for inherited properties, that affects
      // the computation of our rules (we inherit rules from our
      // parents that apply to those expanders).
      if (expanders) {
        var inhexp = null;
        var inhexpcount = 0;
        for (var e in expanders) {
          if (expanders.hasOwnProperty(e)
              && ((nodeinherited && (e in nodeinherited))
                  ? nodeinherited[e]
                  : (e in cssinherited))) {
            if (inhexp == null) { inhexp = {}; }
            inhexp[e] = true;
            inhexpcount++;
          }
        }
      }
      rules = this.getRulesCache(node, inhexp, inhexpcount);
    }
    // Compute our caches.  We may discard these below, but we can't
    // tell that until we try to compute them.  Even if we have no
    // rules, we may inherit properties to our local cache.
    var pc = {};
    var ipc = {};
  nextrule:
    for (var i:Number = rules.length - 1; i >= 0; i--) {
      var rule = rules[i];
      // For dynamic rules, we only take the properties if the dynamic
      // rule applies now
      if (rule.dynamic) {
        var rp = rule.parsed;
        var compound:Boolean = (!! rp['length']);
        // Quick test for compound _not_ applying: If the last
        // selector is not applicable, no need to even try.  It will
        // either apply to our parent (already cached) or a child, but
        // not us.
        if (compound) {
          // Look at the last selector
          rp = rp[rp.length - 1];
        }
        var tp = rp['a'] ? rp : rp['&'];
        while (tp) {
          var tpa:String = tp.a;
          // The dynamic part could be anywhere
          if ('v' in tp) {
            var nav = node[tpa];
            // TODO: [2010-04-26 ptw] (LPP-8940) CSS dynamic
            // attribute comparison needs to use presentAttribute;
            // for now, we just coerce to a String.
            nav += '';
            var tpv = tp.v;
            if (! tp['m']) {
              // equality-test is the default
              if (nav != tpv) {
                continue nextrule;
              }
            } else {
              // Do it the hard way
              var tpm:String = tp.m;
              if (tpm == "~=") {
                // word search
                if ((nav != tpv) && (nav.search('(^| )' + tpv + '( |$)') == -1)) {
                  continue nextrule;
                }
              } else if (tpm == "|=") {
                // prefix search
                if (nav.indexOf(tpv + '-') != 0) {
                  continue nextrule;
                }
              } else if ($debug) {
                Debug.error("Unknown attribute match %#s", tp.m);
              }
            }
          }
          // verify the next condition
          tp = tp['&'];
        }
        // Is this a compound dynamic rule?
        if (compound) {
          if (! this._compoundSelectorApplies(rule.parsed, node, null, false)) {
            continue nextrule;
          }
        }
      }
      // Either a static rule or a dynamic rule that is currently applicable
      var props = rule.properties;
      for (var pname:String in props) {
        if (expanders && (pname in expanders)) {
          var expprops = node[expanders[pname]](pname, props[pname]);
          for (var exppname:String in expprops) {
            pc[exppname] = ipc[exppname] = expprops[exppname];
          }
        }
        pc[pname] = ipc[pname] = props[pname];
      }
    }
    // Copy inheritable properties from the parent inherited cache
    // simultaneously updating our local cache and our inherited cache
    // and determining whether we actually inherit any properties
    // locally.
    //
    // NOTE: [2010-11-03 ptw] The local cache only inherits properties
    // that are either globally inheritable or defined to be
    // inheritable by the local node (either in a rule or because the
    // property is custom defined inheritable), but the inherited
    // cache must cache _all_ properties, because we don't know
    // whether a property will actually be inherited or not until we
    // get to the inheriting node.
    var inhprops:Boolean = true;
    for (var k:String in pipc) {
      var ival = pipc[k];
      if (! (k in pc)) {
        // inherit cache takes parent value
        ipc[k] = ival;
        // local cache only inherits if inheritable
        // NOTE: nodeinherited overrides cssinherited so
        // `inherit='false'` will work
        if ((nodeinherited && (k in nodeinherited)) ? nodeinherited[k] : (k in cssinherited)) {
          pc[k] = ival;
          inhprops = true;
        }
      } else if (pc[k] === LzCSSStyleClass.INHERIT) {
        // if local cache asks, inherit from parent
        ipc[k] = pc[k] = ival;
        inhprops = true;
      }
    }
    if ((rules.length == 0) && (! inhprops)) {
      // Did we do all that work for nothing?  We can't really tell
      // until we know we have no rules _and_ inherited nothing, but
      // lets at least help the garbage collector by using the
      // canonical empty cache for our local cache
      pc = LzCSSStyleClass.EMTPY_CACHE;
      // and sharing the parent inherit cache
      ipc = pipc;
    }
    // Update the caches, signal any dependents
    node.__LZPropertyCache = pc;
    // Only send the inherited event if something actually changed
    var send:Boolean = false;
    var oipc = node['__LZInheritedPropertyCache'] || LzCSSStyleClass.EMTPY_CACHE;
    node.__LZInheritedPropertyCache = ipc;
    for (var op:String in oipc) {
      if (oipc[op] !== ipc[op]) {
        send = true;
        break;
      }
    }
    if (! send) {
      for (var np:String in ipc) {
        if (oipc[np] !== ipc[np]) {
          send = true;
          break;
        }
      }
    }
    if (send) {
      var evt = node.on__LZInheritedPropertyCache;
      if (evt.ready) {
        evt.sendEvent(ipc);
      }
    }
    return pc;
  };

  // Computes all possibly applicable rules for this node.  Dynamic
  // selectors are evaluated by getPropertyCache.  This cache only
  // needs to be flushed if new CSS rules are added at run time.
  function getRulesCache (node:LzNode, expanders = null, expandercount = 0):Array {
    var rules:Array = node['__LZRuleCache'];
    if (rules) { return rules; }
    rules = new Array();

    /**
     * NOTE: [2008-09-08 ptw] These rules are gathered in approximate
     * specificity order, to minimize the cost of the sort below.  Take
     * great care if you muck with this code that you don't screw that
     * up!
     */
    // Ensure the rule cohorts are in order
    if (this._rulenum != this._lastSort) {
      this._sortRules();
    }

    // The dependencies for the applicability of this rule cache.  If
    // any of these dependencies change, the applicability of the
    // rules will need to be recomputed
    var deps:Object = {};
    // Closure to pass to the compound rule checker
    function gather (attr:String, node:LzNode) {
      var nodes:Array = deps[attr];
      if (! nodes) {
        deps[attr] = [node];
        return;
      }
      for (var i:Number = 0, l:Number = nodes.length; i < l; i++) {
        if (node === nodes[i]) {
          return;
        }
      }
      nodes.push(node);
    }

    // Repeat for id rules, name and attr rules, tag rules and *
    // rules, filtering as you go, to calculate the rules that apply
    // to this node.
    var tryRules:Array;
    var state:String = 'id';
    var substate:Number = 0;
    var attrs = this._attrs;
    // Each class has a list of the CSS tags that could possibly apply
    // to it.  We only test the corresponding tag rule cohorts.
    var tags = node.constructor.__LZCSSTagSelectors;
    var sortNeeded:Boolean = false;
    var lastSpecificity:Number = Infinity;
    // Go through each of the rule cohorts
    while (state) {
    step:
      switch (state) {
        case 'id':
          // We only pass this way once
          state = 'name';
          // Try the id rules that could apply
          var id:String = node['id'];
          // Does this node have an id with rules?
          if (id && (tryRules = this._idRules[id])) {
            break step;
          }
        case 'name':
          // We only pass this way once
          state = 'attr';
          // Try the name rules that could apply
          var name:String = node['name'];
          // Does this node have an name with rules?
          if (name && (tryRules = this._nameRules[name])) {
            break step;
          }
        case 'attr':
          // Try the attribute rules that could apply
          while (substate < attrs.length) {
            var k:String = attrs[substate++];
            // Does this node have that attribute? NOTE: [2010-08-19
            // ptw] We'd like to ask `k in node` but this does not
            // work for as3, so we approximate.  This is why
            // attributes have to at least be initialized to `null`
            // in applyArgs
            if (node[k] !== (void 0)) {
              // Get the rules for that attribute
              tryRules = this._attrRules[k];
              break step;
            }
          }
          state = 'tag';
          substate = 0;
        case 'tag':
          // Try the tag rules that could apply
          while (tags && (substate < tags.length)) {
            var tn:String = tags[substate++];
            if (tryRules = this._tagRules[tn]) {
              break step;
            }
          }
          state = null;
          substate = 0;
        default:
          // Complex rules with no discriminating tag end up here
          tryRules = this._rules;
      }

      // Now winnow the rules by applicability, at the same time, see if
      // any sorting is needed
    nextrule:
      for ( var i:Number = 0, l:Number = tryRules.length; i < l; i++ ) {
        var r:LzCSSStyleRule = tryRules[i];
        if (! sortNeeded) {
          var rs:Number = r.specificity;
          if (rs >= lastSpecificity) {
            sortNeeded = true;
          } else {
            lastSpecificity = rs;
          }
        }
        var rp = r.parsed;
        var compound:Boolean = (!! rp['length']);
        // Quick test for compound _not_ applying: If the last
        // selector is not applicable, no need to even try.  It will
        // either apply to our parent (already cached) or a child, but
        // not us.
        if (compound) {
          // Look at the last selector
          rp = rp[rp.length - 1];
        }
        // We only have to look more carefully at the complex cohorts
        // (attr, tag and *)
        if (! ((state == 'id') || (state == 'name'))) {
          // If there is a tag, it must match
          var rptn:String = rp['t'];
          if (rptn && ((! lz[rptn]) || (! (node is lz[rptn])))) {
            // Does not apply
            continue nextrule;
          }
          // Now check attrs and conjunctions
          var tp = rp['a'] ? rp : rp['&'];
          while (tp) {
            var tpa:String = tp.a;
            // NOTE: [2010-08-19 ptw] We'd like to ask `tpa in node`
            // but this does not work for as3, so we approximate.
            // This is why attributes have to at least be initialized
            // to `null` in applyArgs
            if (node[tpa] === (void 0)) {
              // Does not apply
              continue nextrule;
            }
            if ('v' in tp) {
              // `name` is not a dynamic attribute, but if the node
              // otherwise has the attribute and there is a value
              // specified, the applicbility is dynamic
              if (tpa == 'name') {
                if (! tp['m']) {
                  // Inline common/simple case
                  if (node.name != tp.v) {
                    continue nextrule;
                  }
                } else if (! this._complexAttrMatch(node.name, tp.v, tp.m)) {
                  continue nextrule;
                }
              } else {
                // ...note the applicability dependency on this node and
                // attribute.  We inline the common case
                if (! deps[tpa]) {
                  deps[tpa] = [ node ];
                } else {
                  gather (tpa, node);
                }
              }
            }
            // verify the next condition
            tp = tp['&'];
          }
        }
        if (compound) {
          // Last selector applies, so verify that the whole rule
          // applies.  (Need to go back to original rule to do this.)
          // At the same time, we accumulate any dependencies that
          // could change the applicability of the compound rule.
          if (! this._compoundSelectorApplies(r.parsed, node, gather, false)) {
            // Does not apply
            continue nextrule;
          }
        }
        // Passed all but the dynamic matches, take it
        rules.push(r);
      }
    }

    if (sortNeeded) {
      //     if ($debug) {
      //       var s = "";
      //       for (var i = 0, l = rules.length; i < l; i++) {
      //         s += rules[i].specificity + ' ';
      //       }
      //       Debug.debug("Sorting %w (%s)", rules, s);
      //     }
      rules.sort(this.__compareSpecificity);
      //   } else if ($debug) {
      //     Debug.debug("Saved a sort! %w", rules);
    }

    // If there are expanders for inheritable properties, we need to
    // append rules from parents that match those expanders
    if (expanders && expandercount > 0) {
      // Remove expanders we have already satisfied
      for (var i:Number = rules.length - 1; (i >= 0) && (expandercount > 0); i--)  {
        var props = rules[i].properties;
        for (var pname:String in props) {
          if (pname in expanders) {
            delete expanders[pname];
            expandercount--;
            if (! expandercount) { break; }
          }
        }
      }
      var ip:LzNode = node.immediateparent;
      while ((expandercount > 0) && ip) {
        var parentrules = this.getRulesCache(ip);
        // Find the first applicable rule
        for (var i:Number = 0, l:Number = parentrules.length; (i < l) && (expandercount > 0); i++) {
          var prule:LzCSSStyleRule = parentrules[i];
          var props = prule.properties;
          for (var pname:String in props) {
            if (pname in expanders) {
              // We have to make a new rule with just the expander,
              // since that is all we inherit
              var nprops = {};
              nprops[pname] = props[pname];
              rules.push(new LzCSSStyleRule(prule.parsed, nprops, ($debug ? prule['_dbg_filename'] : ''), ($debug ? prule['_dbg_lineno'] : 0)));
              delete expanders[pname];
              expandercount--;
            }
          }
        }
        var next:LzNode = ip.immediateparent;
        if (next && (next != ip)) {
          ip = next;
        } else {
          break;
        }
      }
    }

    // We always have to create a dependency on the parent inherited
    // cache, because you never know when a property might be added or
    // removed that might affect us, or one of our children.  The only
    // way to improve this would be to propagate the list of requested
    // inherited properties up the tree so we know not to send the
    // event if no one is requesting the properties we propagate.
    var ip = node.immediateparent;
    if (ip !== node) {
      deps['__LZInheritedPropertyCache'] = [ ip ];
    }
    // Apply that, and any constraints derived from rules
    node.__applyCSSConstraints(deps);

    node.__LZRuleCache = rules;

    return rules;
  };

  /** @access private */
  function __compareSpecificity (rA:LzCSSStyleRule, rB:LzCSSStyleRule):Number {
    // Specificity is stored when the rule is parsed
    var specificityA:Number = rA.specificity;
    var specificityB:Number = rB.specificity;

    // Simplest case: they have different specificity
    if ( specificityA != specificityB ) {
      return (specificityA < specificityB) ? 1 : -1;
    }

    // Ties that involve tag selectors are broken by comparing the
    // specificity of the classes of the tags
    var rap = rA.parsed;
    var rbp = rB.parsed;
    var lexorder:Number = ((rA._lexorder < rB._lexorder ) ? 1 : -1);

    // Simple rules have no length
    if ((! rap['length']) && (! rbp['length'])) {
      // Simple tag rules have a class name property
      var ratn:String = rap['t'];
      var rbtn:String = rbp['t'];

      // Simpler case: Not tag rules, or the classes are the same
      if ((! ratn) || (! rbtn) || (ratn == rbtn)) {
        return lexorder;
      }

      // Simple case: Neither compound
      //  Push comes to shove -- the classes had better exist now
      var rac:Class = lz[ratn];
      var rbc:Class = lz[rbtn];
      // Subclass test
      if (rac && rbc) {
        if (rac subclassof rbc) { return -1; }
        if (rbc subclassof rac) { return 1; }
      }
      // The classes are not comparable, default
      return lexorder;
    }

    // Hard case: Compound rule must be examined step-by-step
    for ( var i:Number = 0; i < rap.length; i++ ) {
      var rapi = rap[i];
      var rbpi = rbp[i];
      // if we get here, it means that two rules have the same
      // specificity but different numbers of descendants?
      if ( !rapi || !rbpi ) {
        //       if ($debug) {
        //         Debug.debug("%s: %w <=> %w", arguments.callee, rA, rB);
        //       }
        // Punt to lexical order
        break;
      }
      //  Classes get defined lazily, way after rules are
      //  parsed, so we have to defer evaluating them
      var ratn:String = rapi['t'];
      var rbtn:String = rbpi['t'];
      if ( ( ratn && rbtn ) && ( ratn != rbtn ) ) {
        //  Push comes to shove -- the classes had better exist now
        var rac:Class = lz[ratn];
        var rbc:Class = lz[rbtn];
        // Subclass test
        if (rac && rbc) {
          if (rac subclassof rbc) { return -1; }
          if (rbc subclassof rac) { return 1; }
        }
        // The classes are not comparable, keep going
      }
    }
    // Last ditch
    return lexorder;
  };


  /**
   * Complex attribute matcher
   */
  function _complexAttrMatch(nav:String, tpv:String, tpm:String):Boolean {
    if (! tpm) {
      return (nav == tpv);
    } else if (tpm == "~=") {
      // word search
      return ((nav == tpv) || (nav.search('(^| )' + tpv + '( |$)') >= 0));
    } else if (tpm == "|=") {
      // prefix search
      return (nav.indexOf(tpv + '-') == 0);
    } else if ($debug) {
      Debug.error("Unknown attribute match %#s", tpm);
    }
    return false;
  }

  /**
   * The optimized applicability test is inlined in
   * getPropertyValueFor(), make sure they stay in sync
   *
   * If gather is non-null, we are just gathering dependencies on
   * dynamic attributes.  If it is null, we verify that the dynamic
   * attributes actually match now
   * @access private
   */
  function _compoundSelectorApplies (parsedsel:Array, startnode:LzNode, gather:Function, anchored:Boolean):Boolean {
    var startindex = parsedsel.length - 1;
    if (!anchored) {
      // Our caller has already verified that the last selector applies
      // to this node, so we just need to verify the selectors to the
      // left match parents.
      if (startnode === canvas) { return false; }
      startnode = startnode.immediateparent;
      startindex--;
    }
  nextselector:
    for (var node:LzNode = startnode, i:Number = startindex;
         i >= 0 && node;
         i--, node = ((node === canvas) ? null : node.immediateparent)) {
      // Components of a parsed compound rule are parsed
      var rp = parsedsel[i];
      var rptn:String = rp['t'];
      var rpi:String = rp['i'];
      // look up the nodes to see if this selector applies to the
      // current node or a parent
    nextnode:
      for (; node; node = (((node === canvas) || (anchored && (node === startnode))) ? null : node.immediateparent)) {
        // Check id
        if (rpi && node['id'] != rpi) {
          continue nextnode;
        }
        // Check tag
        if (rptn && ((! lz[rptn]) || (! (node is lz[rptn])))) {
          continue nextnode;
        }
        // Check attrs and conjunctions
        var tp = rp['a'] ? rp : rp['&'];
        while (tp) {
          var tpa:String = tp.a;
          // NOTE: [2010-08-19 ptw] We'd like to ask `tpa in node` but
          // this does not work for as3 sealed classes, so we
          // approximate.  This is why attributes have to at least be
          // initialized to `null` in applyArgs
          if (node[tpa] === (void 0)) {
            continue nextnode;
          }
          // If this attribute is being checked for a value, not just
          // presence, dig deeper
          if ('v' in tp) {
            if (gather && (tpa != 'name')) {
              // In gather mode, we just collect dependencies 'name'
              // is not a dynamic attribute, so can't have
              // dependencies and it _must_ match.  Otherwise note the
              // applicability dependency on this node and attribute
              gather(tpa, node);
            } else {
              // Otherwise verify the current applicability
              var nav = node[tpa];
              // TODO: [2010-04-26 ptw] (LPP-8940) CSS dynamic
              // attribute comparison needs to use presentAttribute;
              // for now, we just coerce to a String.
              nav += '';
              var tpv = tp.v;
              if (! tp['m']) {
                // Inline common/simple case
                if (nav != tpv) {
                  continue nextnode;
                }
              } else if (! this._complexAttrMatch(nav, tpv, tp.m)) {
                continue nextnode;
              }
            }
          }
          // verify the next condition
          tp = tp['&'];
        }
        // We've got a match on this node for this portion of the
        // compound selector.
        if (i == 0) {
          // Total match
          return true;
        }
        // Match next rule in the compound to the next ancestor
        // (next step in outer for loop)
        continue nextselector;
      }
      // Got to the canvas or end of the rule without a match
      return false;
    }
    // Got to the canvas or end of the rule without a match
    return false;
  };

  /** @access private */
  var _rulenum:Number = 0;

  /** @access private */
  var _lastSort:Number = -1;

  function _sortRules ():void {
    function deleteDuplicates (sortedRules:Array):void {
      for (var i:Number = sortedRules.length - 2; i >= 0; i--) {
        if (sortedRules[i].equal(sortedRules[i + 1])) {
          //           if ($debug) {
          //             Debug.debug("Removing duplicate: %w == %w",
          //                         sortedRules[i], sortedRules[i + 1]);
          //           }
          sortedRules.splice(i + 1, 1);
        }
      }
    }

    if (this._rulenum != this._lastSort) {
      deleteDuplicates(this._rules);
      for (var k:String in this._idRules) {
        var rk:Array = this._idRules[k];
        rk.sort(this.__compareSpecificity);
        deleteDuplicates(rk);
      }
      for (var k:String in this._nameRules) {
        var rk:Array = this._nameRules[k];
        rk.sort(this.__compareSpecificity);
        deleteDuplicates(rk);
      }
      for (var k:String in this._attrRules) {
        var rk:Array = this._attrRules[k];
        rk.sort(this.__compareSpecificity);
        deleteDuplicates(rk);
      }
      for (var k:String in this._tagRules) {
        var rk:Array = this._tagRules[k];
        rk.sort(this.__compareSpecificity);
        deleteDuplicates(rk);
      }
      // TODO: [2011-03-01 ptw] Sort the tags so that they are
      // searched in specificity order (most specific first).  This is
      // not easy to do, since the classes are only partially ordered.
      // You can't just sort using subclassof.  Sorting by the depth
      // of the superclass chain might be a reasonable approximation.
      this._rules.sort(this.__compareSpecificity);
      this._lastSort = this._rulenum;
    }
  };

  /**
   * do some preprocessing to speed up lookups
   * @access private */
  function _addRule ( r:LzCSSStyleRule ):void {
    // Assign lexical order
    r._lexorder = this._rulenum++;

    // Get the most-specific selector
    var lastsel = r.parsed;
    if (lastsel['length']) {
      lastsel = lastsel[lastsel.length - 1];
    }

    var id:String = lastsel.i;
    var attr:String = lastsel.a;
    var tag:String = lastsel.t;
    var match:String = lastsel.m;
    var compound:Object = lastsel['&'];
    // Sort rules into different cohorts to reduce the number of rules
    // we have to test for applicability in getRulesCache
    if (id && (! (attr || tag || compound))) {
      // A simple id rule is the easiest match
      var itab:Array = this._idRules[id];
      if (! itab) {
        itab = this._idRules[id] = [];
      }
      itab.push(r);
    } else if (attr && (! (id || match || compound))) {
      // A simple attr rule (existence or equality) is the second
      // easiest match.
      // Special-case name= because it is a constant (and the most
      // popular attribute to select on).
      var value:String = lastsel.v;
      if (value && (attr == 'name')) {
        var ntab:Array = this._nameRules[value];
        if (! ntab) {
          ntab = this._nameRules[value] = [];
        }
        ntab.push(r);
      } else {
        var atab:Array = this._attrRules[attr];
        if (! atab ) {
          this._attrs.push(attr);
          atab = this._attrRules[attr] = [];
        }
        atab.push(r);
      }
    } else if (tag) {
      // Complex rules end up here.  We hope we can filter on tag
      // first, and avoid the overhead of a full match
      var ttab:Array = this._tagRules[tag];
      if (! ttab ) {
        this._tags.push(tag);
        ttab = this._tagRules[tag] = [];
      }
      ttab.push(r);
    } else {
      // All other rules end up here and we have to do them the hard
      // way
      this._rules.push(r);
    }
  };
};                              // End of LzCSSStyleClass

var LzCSSStyle:LzCSSStyleClass = new LzCSSStyleClass ();
lz.CSSStyle = LzCSSStyleClass;  // publish



/** These objects implement
 * Interface CSSStyleDeclaration (introduced in DOM Level 2) from
 * http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
 */
final class LzCSSStyleDeclaration {

  function LzCSSStyleDeclaration (){ };

  /** @access private */
  var _node = null;

  function getPropertyValue ( pname ){
    return LzCSSStyle.getPropertyValueFor( this._node , pname );
  };

  function setNode ( node ){
    this._node = node;
  };

};                              // End of LzCSSStyleDeclaration
lz.CSSStyleDeclaration = LzCSSStyleDeclaration; // publish
