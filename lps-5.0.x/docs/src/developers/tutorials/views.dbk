<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="views-tutorial">
  <?dbhtml dir="tutorials" ?>

  <title>Introduction to Views</title>

  <section>
    <title>Introduction</title>

    <para> Views are the basic visual element in OpenLaszlo applications. They allow you to specify
      how elements will interact with one another. In the OpenLaszlo Basics tutorial we've seen how
      to specify a top-to-bottom organization of text elements. In this tutorial you'll learn how to
      do more complex and powerful interactions among visual elements.</para>

    <para>Here's the code from the previous tutorial:</para>

    <example role="live-example">
      <title>Simple window</title>
      <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-tutorial-$1.lzx"/></textobject> 
   </programlisting>
    </example>

    <para>We've added a button (My Button) just to remind us of how the
        <literal>&lt;simplelayout&gt;</literal> affected the sibling elements. </para>

    <para>That button would look better if it were centered. There is an attribute that we could use
      to do this, but just to see better how LZX works, let's center the button programatically.
      This will give you a good look at how <emphasis>constraints</emphasis> and
      <emphasis>modifiers</emphasis> work, which will help you build more complex views.</para>

  </section>
  <section id="views-tutorial.constraints">
    <title>Constraints and Modifiers</title>

    <para>A constraint is an object which takes responsibility for keeping a view property set to a
      certain value. Constraints are described in full in <xref linkend="constraints"/>, but here
      we'll just get a flavor of them because they are a key feature of LZX syntax. In order to show
      constraints, we'll also introduce the key concepts of "parent" and "immediateparent", which
      describe where views fit in different kinds of hierarchies.</para>
    <para> Depending on the type of constraint, that can be 'the x position of the mouse' or 'the
      width of the parent view' or whatever. In this case, we will constrain a property to the width
      of the parent view.</para>

    <example role="live-example">
      <title>Constraining button position relative to window</title>
      <programlisting language="lzx">
     <textobject><textdata fileref="programs/views-tutorial-$2.lzx"/></textobject> 
     </programlisting>
    </example>
    <para>What we've said here is "constrain the x position of the button to half the width of its
      parent". Actually we said "immediateparent". What's that about?</para>

    <section>
      <title>Parent and Immediateparent</title>
      <para> As explained in greater depth in <xref linkend="views"/>, "parent" is a term that
        refers to the lexical parent in the code, and "immediateparent" refers to the runtime parent
        of a view as the code is executed. Often they are the same thing, but it's important to
        understand when they're not. In particular, you generally need to use "immediateparent" when
        you create views by instantiating classes. </para>
      <para> You can <emphasis>always</emphasis> use <literal>immediateparent</literal>, instead of
          <literal>parent</literal> (you just have to type those extra 9 characters). In this case
        the <literal>immediateparent</literal> is the window's content area (the white bit). In
        short we had to use <literal>immediateparent</literal> here because
          <literal>&lt;window&gt;</literal> is a <emphasis>class</emphasis>, and when you
        instantiate it and put contents inside of it, you must use the
        <literal>immediateparent</literal> reference to get the desired behavior.</para>

    </section>
    <section>
      <title>Operations in Constraints</title>
      <para>You can perform operations on the value an attribute that you constrain to. The modifier
        in our example is the "divide by two" operator.</para>

      <para>Notice that this code does not center the button. Rather, it constrains the position of
        the button to the middle of the window. The problem is that the position of a view is
        determined by its top-left corner. In other words, the top-left corner of the button is
        centered in the window, not the button itself. In order to center the button, we need to
        move it over by half of its own width. One way to do that would be to just give the button
        an explicit width, and offset the constraint by half of that. </para>

      <example role="live-example">
        <title>Centering the button</title>
        <programlisting language="lzx">
     <textobject><textdata fileref="programs/views-tutorial-$3.lzx"/></textobject> 
     </programlisting>
      </example>


      <para>That works but it's not a general solution. We want the button to always be in the
        middle of the window even if it changes width. Here's how we do that:</para>

      <example role="live-example">
        <title>A button that stays centered</title>
        <programlisting language="lzx">
     <textobject><textdata fileref="programs/views-tutorial-$4.lzx"/></textobject> 
     </programlisting>
      </example>

      <para>This will center the button regardless of its size. Parenthesis have been added to
        clarify the execution order of the code. To prove that the button will remain centered,
        we'll add an onclick script to the button that will resize it.</para>
      <para> For now, you don't need to understand how this works. Simply observe that when you
        click the button, its width grows. We'll revisit this topic in the <xref
          linkend="scripting-tutorial"/>.</para>

      <example role="live-example">
        <title>Growing button</title>
        <programlisting language="lzx">
     <textobject><textdata fileref="programs/views-tutorial-$5.lzx"/></textobject> 
     </programlisting>
      </example>

      <para>Notice that as the button grows, it still stays centered.</para>

    </section>
  </section>
  <section>
    <title>Layouts and Container Views</title>

    <para>What if now we wanted to have a row of buttons going across the top of our window? We can
      try adding a few buttons at the top:</para>

    <example role="live-example">
      <title>Vertically aligned buttons</title>
      <programlisting language="lzx">
     <textobject><textdata fileref="programs/views-tutorial-$6.lzx"/></textobject> 
     </programlisting>
    </example>


    <para>We can't change the <literal>&lt;simplelayout&gt;</literal> tag, because that
      would make a mess of the other elements in the window. Instead we can put all three buttons in
      their <emphasis>own</emphasis> view, and that view will then become a single element in the
      window.</para>
    <para>Then we can apply whatever kind of layout/positioning to the button view we want:</para>

    <example role="live-example">
      <title>Grouping buttons in a &lt;view&gt;</title>
      <programlisting language="lzx">
     <textobject><textdata fileref="programs/views-tutorial-$7.lzx"/></textobject> 
     </programlisting>
    </example>

    <para>That's better. By using the attribute <literal>bgcolor</literal> (background color) we can
      see how big the view is; it's only as big as it needs to be. We haven't specified either a
      height or width, so it is just large enough to accommodate the buttons.</para>

    <para>What if we wanted the row to be like the toolbars at the top of your browser - a uniform
      color, that stretches from end to end?</para>

    <para>We would constrain the width of the red view to the width of its parent.</para>

    <example role="live-example">
      <title>Constraining a width to a parent's width</title>
      <programlisting language="lzx">
     <textobject><textdata fileref="programs/views-tutorial-$8.lzx"/></textobject> 
     </programlisting>
    </example>


    <para>Now the view stretches across, but if you look at the toolbars you'll notice that they are
      a little bit taller than the buttons they contain. To make our buttons look the same, we could
      set an absolute height, but let's make it dependent on one of the buttons:</para>

    <example role="live-example">
      <title>Constraining view to child's height</title>
      <programlisting language="lzx">
     <textobject><textdata fileref="programs/views-tutorial-$9.lzx"/></textobject> 
     </programlisting>
    </example>


    <para>In order to be able to reference a particular button, we had to give it a
      <literal>name</literal> attribute.</para>

    <para>Now the buttons are top-aligned â€” they should be vertically aligned to the center of the
      red bar. Remember how earlier we said that there was an attribute to align stuff to the
      center? We're going to use it now:</para>

    <example role="live-example">
      <title>Using the 'valign' attribute</title>
      <programlisting language="lzx">
       <textobject><textdata fileref="programs/views-tutorial-$10.lzx"/></textobject> 
     </programlisting>
    </example>


    <para>The <literal>valign</literal> attribute aligns the view to the middle of its parent's
      height. It can take a value of <literal>top</literal>, <literal>middle</literal> or
        <literal>bottom</literal>. There is an <literal>align</literal> attribute that aligns views
      to the x-axis. The only problem with using that here is that we'd have to give each button a
        <literal>valign</literal> attribute.</para>

    <para>The solution is to wrap all of our buttons in a view. Then we could apply a
        <literal>valign</literal> attribute to all of them at once.</para>

    <example role="live-example">
      <title>Applying 'valign' to container view</title>
      <programlisting language="lzx">
     <textobject><textdata fileref="programs/views-tutorial-$11.lzx"/></textobject> 
     </programlisting>
    </example>

    <para>OK, we seem to have lost buttons one and two, but let's come back to that. You'll notice
      that we gave the new view a name: "buttons". We also had to change the address to the button's
      height from <literal>this.refButton.height</literal> to
      <literal>this.buttons.refButton.height</literal>. This was necessary because
        <literal>refButton</literal> is now inside <literal>buttons</literal>, which is inside the
      red view.</para>

    <para>Now to get buttons one and two back! In the "buttons" view, there is nothing to tell the
      OpenLaszlo Runtime that it should space them out. Why not? Because we forgot to transfer the
        <literal>&lt;simplelayout&gt;</literal> tag to the <literal>buttons</literal> view.</para>

    <example role="live-example">
      <title>Using &lt;simplelayout&gt; to align buttons</title>
      <programlisting language="lzx">
       <textobject><textdata fileref="programs/views-tutorial-$12.lzx"/></textobject> 
     </programlisting>
    </example>
    <para>We changed the color of the view to make it look better. </para>
  </section>
</chapter>
