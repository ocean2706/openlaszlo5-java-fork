<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="text-tutorial">
   <?dbhtml dir="tutorials" ?>
   <title>Introduction to Text and Fonts</title>

   <section>
      <title>Introduction</title>

      <para>This tutorial shows how to work with text and fonts in OpenLaszlo applications. <xref
            linkend="text"/> and <xref linkend="fonts"/> explain more advanced topics.</para>
      <para> Note that the behavior of LZX applications may differ between applications compiled for
         SWF and those compiled for DHTML. Certain APIs are available in only one or the other
         runtime. We'll call attention to these subjects in the sections that follow. </para>

   </section>
   <section id="text-tutorial.basics">
      <title>The &lt;text&gt; Tag</title>

      <para>Entering text is easy with the <literal>&lt;text&gt;</literal> tag:</para>

      <example role="live-example">
         <title>The simple &lt;text&gt; tag</title>
         <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$1.lzx"/></textobject> 
   </programlisting>
      </example>

      <para>Text that is between the <literal>&lt;text&gt;</literal> tags is normalized,
         meaning that preceding and trailing whitespace is ignored, as are multiple whitespace
         elements between words. that is, if you put several spaces between words, the output will
         still be a single space. If you put a line break in the text, it will be rendered as a
         single whitespace element (that is, a space), and text fields will stretch to fit their
         contents.</para>

      <para>The <literal>&lt;text&gt;</literal> tag is a view, so it can be treated as one.
         It can be given all the default view attributes, such as <literal>width</literal>,
            <literal>x</literal>, <literal>y</literal> and so forth.</para>

      <example role="live-example">
         <title>&lt;text&gt; is a &lt;view&gt;</title>
         <programlisting language="lzx">
     <textobject><textdata fileref="programs/text-tutorial-$2.lzx"/></textobject> 
     </programlisting>
      </example>

      <para>Notice how the text gets cut off because we set the width attribute? </para>



   </section>
   <section id="text-tutorial.multiline">
      <title>Multiline Text</title>

      <para>Having multiline areas of text is just as easy. All we do is set the
         <literal>multiline</literal> attribute to <literal>true</literal>:</para>

      <example role="live-example">
         <title>Multiline text</title>
         <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$3.lzx"/></textobject> 
   </programlisting>
      </example>
      <para>The text still follows the same normalization rules, so in this case the text wraps at
         150px (because we explicitly set the width of the <literal>&lt;text&gt;</literal>
         tag to that), and stretches vertically as far as it needs to go.</para>

      <para>The line breaks are still being ignored, but we can fix that by entering them manually:</para>

      <example role="live-example">
         <title>Inserting line breaks</title>
         <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$4.lzx"/></textobject> 
   </programlisting>
      </example>

      <para>The <literal>&lt;br&gt;</literal> tag is used to denote a single line break.
         This may be familiar to you from HTML. Just be careful to note that since we are working in
         XML, empty elements have to be closed with a forward slash:
         <literal>&lt;br/&gt;</literal>. (This is the same as in XHTML.)</para>


   </section>
   <section>
      <title>Including HTML Markup in OpenLaszlo Applications</title>

      <para>Openlaszlo provides support for incorporating HTML. Here's a list of tags that are
         supported:</para>

      <para role="todo">
         <remark role="todo"><emphasis role="para-label">TODO: </emphasis>Find out if P tag has been
            made obsolete.</remark>
      </para>

      <informaltable>
         <tgroup cols="2">
            <thead>
               <row>
                  <entry>Tag</entry>
                  <entry>Meaning</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <literal>&lt;a&gt;</literal>
                  </entry>
                  <entry>
                     <para>Hypertext Link</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <literal>&lt;b&gt;</literal>
                  </entry>
                  <entry>
                     <para>Bold Text</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <literal>&lt;font&gt;</literal>
                  </entry>
                  <entry>
                     <para>Defines and implements fonts</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <literal>&lt;i&gt;</literal>
                  </entry>
                  <entry>
                     <para>Italic text</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <literal>&lt;p&gt;</literal>

                  </entry>
                  <entry>
                     <para>Paragraph</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <literal>&lt;u&gt;</literal>
                  </entry>
                  <entry>
                     <para>Underline</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <literal>&lt;img&gt;</literal>

                  </entry>
                  <entry>
                     <para>image</para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </informaltable>

      <section>
         <title>Including Links</title>
         <example role="live-example">
            <title>Specifying a font</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$5.lzx"/></textobject> 
   </programlisting>
         </example>

         <para>The word "OpenLaszlo" becomes a hyperlink because of the
            <literal>&lt;a&gt;</literal> tag. It does not get underlined as it might in a
            browser. We can do that ourselves by nesting a <literal>&lt;u&gt;</literal> tag
            inside it:</para>

         <programlisting>&lt;a href="..."&gt;<emphasis role="em">&lt;u&gt;</emphasis>Link<emphasis role="em">&lt;/u&gt;</emphasis>&lt;/a&gt;</programlisting>


      </section>
      <section>
         <title>The &lt;html&gt; Tag</title>
         <para>The <literal>&lt;html&gt;</literal> tag allows you to include complete html
            pages within an OpenLaszlo application. In the example below, the
               <literal>&lt;html&gt;</literal> tag is used inside an OpenLaszlo window,
            which automatically provides scrollbars. Don't worry if you don't understand how the
            code in this example works; the concepts will be explained in later chapters. The key
            thing to note is that you can embed entire HTML pages. </para>
         <example role="live-example">
            <title>The &lt;html&gt; tag</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/html.lzx"/></textobject> 
   </programlisting>
         </example>


      </section>
   </section>
   <section id="text-tutorial.fonts">
      <title>Fonts</title>
      <para> OpenLaszlo provides capabilities for specifying the which fonts will appear in your
         application. All applications can use fonts that are provided by the local system. In
         addition, applications compiled to SWF can also embed fonts. </para>

      <section>
         <title condition="swf">Fonts in SWF Applications</title>
         <para> In applications compiled to SWF, OpenLaszlo supports both <emphasis role="i"
               >embedded </emphasis>fonts, which are downloaded with your application, and <emphasis
               role="i">client</emphasis> fonts, which reside natively on the machines on which your
            application is used. By default, client fonts are used. Client fonts have certain
            limitations; for example they cannot be rotated or changed in opacity (due to a
            limitation of the Flash Player). See <xref linkend="fonts"/>. </para>

         <section>
            <title condition="swf">Including Fonts</title>
            <para> When compiling to SWF, you can embed fonts using the <literal>src</literal> of
               the <literal>&lt;font&gt;</literal> tag. </para>
            <example role="live-example">
               <title>Using the <literal>src</literal> attribute to specify font</title>
               <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$7.lzx"/></textobject> 
   </programlisting>
            </example>

            <para>OpenLaszlo supports TrueType fonts, and the simplest way to use one is as follows:</para>

            <example role="live-example">
               <title>Naming a font family</title>
               <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$8.lzx"/></textobject> 
   </programlisting>
            </example>

            <para>We called this font <emphasis role="i">serifFont</emphasis>, but we could call it
               whatever we wanted, and that is what will be used to declare its use elsewhere in the
               application.</para>

            <para>The font TTF files can be located in the current directory or another one and
               referenced relatively (<literal>src="../fonts/..."</literal>). Otherwise they are
               included in the LPS webapp directory of the installation under WEB-INF/lps/fonts.
               timonnsr is a font that comes packaged with the OpenLaszlo Server in this location.</para>

            <para>A TrueType file is required for each style of font (e.g. italic, bold, regular),
               which is how fonts are actually packaged. So the following code will <emphasis
                  role="b">not</emphasis> work:</para>


            <informalexample role="live-example">
               <programlisting>
&lt;canvas&gt;
   &lt;!-- WARNING: Bad example! --&gt;
   &lt;font name="serifFont" src="timmonsr.ttf"/&gt;
   &lt;text width="150" height="20"&gt;
      &lt;font face="serifFont" size="14"&gt;Hello, <emphasis role="em">&lt;b&gt;</emphasis>World!<emphasis role="em">&lt;/b&gt;</emphasis>&lt;/font&gt;
   &lt;/text&gt;
&lt;/canvas&gt;
</programlisting>
            </informalexample>


            <para>To correct this, we need to add one line of code to include the bold font:</para>

            <example role="live-example">
               <title>Including bold font</title>
               <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$10.lzx"/></textobject> 
   </programlisting>
            </example>

            <para>The plain font style does not need to be explicitly set;
               <literal>style="plain"</literal> is implied. This method of markup is not always the
               best solution, because it depends on writing cumbersome
               <literal>&lt;font&gt;</literal> tags. </para>
            <para>Instead we can tell the <literal>&lt;text&gt;</literal> tag what fonts and
               sizes to use:</para>

            <example role="live-example">
               <title>Assigning fonts to &lt;text&gt; tag</title>
               <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$11.lzx"/></textobject> 
   </programlisting>
            </example>

            <para>In fact, we can do this with any view (including
               <literal>&lt;window&gt;</literal> tags, and so forth) tag, and its children
               will inherit the fonts that were set:</para>

            <example role="live-example">
               <title>Views inherit font properties</title>
               <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$12.lzx"/></textobject> 
   </programlisting>
            </example>

            <para>The font here is specified in the <emphasis role="i">grandParent</emphasis> view,
               and it is inherited by both text fields.</para>

            <para>Of course font specifications can be overridden further down the hierarchy, both
               through the use of <literal>&lt;font&gt;</literal> tags, and by defining font
               specifications of child views:</para>

            <example role="live-example">
               <title>Overwriting font specifications</title>
               <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$13.lzx"/></textobject> 
   </programlisting>
            </example>
            <para>Both the text fields here have overridden some of the font specs. The ones that
               aren't overridden (such as the face in the left example and the size in the right
               example) are inherited.</para>



         </section>
      </section>
   </section>
   <section id="text-tutorial.changing">
      <title>Changing Text</title>

      <para>The <literal>&lt;text&gt;</literal> element has two ways of reading and writing
         contents: the &lt;text&gt; attribute and the <literal>setAttribute()</literal>
         method.</para>

      <para>The <literal>text</literal> attribute returns the contents of the text box, and the
            <literal>setAttribute('text', ...)</literal> method takes an argument of the string to
         put in the text field:</para>

      <example role="live-example">
         <title>Getting and setting text</title>
         <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$14.lzx"/></textobject> 
   </programlisting>
      </example>
      <para>Using these two methods it is possible to concatenate text and work with it as a string.</para>

      <para>An important thing to remember when working with text is that everything between the
            <literal>&lt;text&gt;</literal> tags is returned by <literal>text</literal>.</para>

      <example role="live-example">
         <title>Text returned</title>
         <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$15.lzx"/></textobject> 
   </programlisting>
      </example>

      <para>This can be both useful and a nuisance. If we were to start parsing the string that is
         returned by the <literal>text</literal> attribute, then we would have to compensate for the
         markup tags. To avoid it, set the font in the <literal>&lt;text&gt;</literal> tag.</para>



   </section>
   <section id="text-tutorial.input">
      <title>Input Text</title>

      <para>The simplest way to provide users with a text field is with the
            <literal>&lt;inputtext&gt;</literal> tag:</para>

      <example role="live-example">
         <title>Using &lt;inputtext&gt;</title>
         <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$16.lzx"/></textobject> 
   </programlisting>
      </example>

      <para>The <literal>&lt;inputtext&gt;</literal> field gives no indication that the text
         can be selected and edited, other than an insert cursor when the user rolls over it. The
            <literal>&lt;inputtext&gt;</literal> element can accept all the
            <literal>&lt;text&gt;</literal> attributes, as well as fonts:</para>

      <example role="live-example">
         <title>&lt;inputtext&gt; accepts &lt;text&gt; attributes</title>
         <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$17.lzx"/></textobject> 
   </programlisting>
      </example>

      <para><literal>text</literal> and <literal>setArgument('text', ...)</literal> will work on
            <literal>&lt;inputtext&gt;</literal> fields as well.</para>

      <para>To overcome the problem of the text field not being recognizable, OpenLaszlo provides
         the <literal>&lt;edittext&gt;</literal> tag:</para>

      <example role="live-example">
         <title>Using &lt;edittext&gt;</title>
         <programlisting language="lzx">
   <textobject><textdata fileref="programs/text-tutorial-$18.lzx"/></textobject> 
   </programlisting>
      </example>

      <para>The <literal>&lt;edittext&gt;</literal> tag can be multiline, and can be
         adjusted in size.</para>


   </section>
</chapter>
